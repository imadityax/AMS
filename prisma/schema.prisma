generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(Employee)
  position      String?
  department    String?

  // ðŸ”¹ Self-relation for hierarchy
  managerId String? @db.ObjectId
  manager   User?   @relation("UserToManager", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employees User[]  @relation("UserToManager")

  // ðŸ”¹ Relations
  tasks           Task[]           @relation("AssignedTasks")
  leaves          Leave[]          @relation("UserLeaves")
  userPermissions UserPermission[] @relation("UserPermissions")
  attendances     Attendance[]
  accounts        Account[]
  sessions        Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String // "pending" | "in-progress" | "done"

  // ðŸ”¹ Assigned to user
  assignedToId String? @db.ObjectId
  assignedTo   User?   @relation("AssignedTasks", fields: [assignedToId], references: [id])
}

model Leave {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  reason    String
  startDate DateTime
  endDate   DateTime
  status    String // "pending" | "approved" | "rejected"

  // ðŸ”¹ Leave belongs to user
  userId String? @db.ObjectId
  user   User?   @relation("UserLeaves", fields: [userId], references: [id])
}

model Permission {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String             @unique
  description String
  category    PermissionCategory
  isActive    Boolean            @default(true)

  // ðŸ”¹ Relations
  userPermissions UserPermission[] @relation("PermissionUsers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPermission {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  permissionId String @db.ObjectId

  // ðŸ”¹ Relations
  user       User       @relation("UserPermissions", fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation("PermissionUsers", fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, permissionId])
}

model Attendance {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  checkIn     DateTime
  checkOut    DateTime?
  status      AttendanceStatus @default(Present)
  hoursWorked Float?

  // ðŸ”¹ Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
}

enum AttendanceStatus {
  Present
  Absent
  Late
  HalfDay
  Holiday
  SickLeave
}

enum Role {
  SuperAdmin
  Admin
  Manager
  TechLead
  Employee
}

enum PermissionCategory {
  USER_MANAGEMENT
  TASK_MANAGEMENT
  LEAVE_MANAGEMENT
  REPORTING
  SYSTEM_SETTINGS
}

// DONT CHANGE OR REMOVE BELOW THIS LINE
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
